import os
import sys
from telegram import Update
from telegram.ext import ContextTypes
from db import add_subscriber, get_all_subscribers, save_sent_message, is_message_sent
from openai import AsyncOpenAI
from dotenv import load_dotenv

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()
sys.stdout.reconfigure(encoding='utf-8')

ADMIN_ID = os.getenv("ADMIN_ID")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
ADMIN_ID = int(ADMIN_ID)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_subscriber(user.id, user.username or "unknown")
    await update.message.reply_text("üíå –¢—ã —Ç–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ø–æ—Ç–æ–∫ –º–∏–ª–æ—Å—Ç–µ–π!")


async def handle_sentmsg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /sentmsg —Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    text_to_send = " ".join(context.args)
    subscribers = get_all_subscribers()

    sent_count = 0
    for user_id, username in subscribers:
        if not is_message_sent(user_id, text_to_send):
            try:
                await context.bot.send_message(chat_id=user_id, text=text_to_send)
                save_sent_message(user_id, text_to_send)
                sent_count += 1
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")


async def handle_sentmsg_ai(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    await update.message.reply_text("üí´ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç...")

    try:
        client = AsyncOpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=os.getenv("OPENROUTER_API_KEY"),
            default_headers={
                "Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}",
                "HTTP-Referer": "https://t.me/carpe_diem_events_record_bot"
            }
        )        
        

        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç —Ç—ë–ø–ª—ã–µ –∏ –º–∏–ª—ã–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                {"role": "user", "content": "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏ –ª–∞—Å–∫–æ–≤—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç."}
            ]
        )

        compliment = response.choices[0].message.content.strip()

        subscribers = get_all_subscribers()
        sent_count = 0
        for user_id, username in subscribers:
            if not is_message_sent(user_id, compliment):
                try:
                    await context.bot.send_message(chat_id=user_id, text=compliment)
                    save_sent_message(user_id, compliment)
                    sent_count += 1
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")

        await update.message.reply_text(f"–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n{compliment}")

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
